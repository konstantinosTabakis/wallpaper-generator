"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlobFromURL = void 0;
var util_1 = require("./util");
var cache = {};
function getCacheKey(url, includeQueryParams) {
    var key = url.replace(/\?.*/, '');
    if (includeQueryParams) {
        key = url;
    }
    // font resource
    if (/ttf|otf|eot|woff2?/i.test(key)) {
        key = key.replace(/.*\//, '');
    }
    return key;
}
function getBlobFromURL(url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var cacheKey, failed, deferred;
        return __generator(this, function (_a) {
            cacheKey = getCacheKey(url, options.includeQueryParams);
            if (cache[cacheKey] != null) {
                return [2 /*return*/, cache[cacheKey]];
            }
            // cache bypass, we don't have CORS issues with cached images
            // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache
            if (options.cacheBust) {
                // eslint-disable-next-line no-param-reassign
                url += (/\?/.test(url) ? '&' : '?') + new Date().getTime();
            }
            failed = function (reason) {
                var placeholder = '';
                if (options.imagePlaceholder) {
                    var parts = options.imagePlaceholder.split(/,/);
                    if (parts && parts[1]) {
                        placeholder = parts[1];
                    }
                }
                var msg = "Failed to fetch resource: ".concat(url);
                if (reason) {
                    msg = typeof reason === 'string' ? reason : reason.message;
                }
                if (msg) {
                    console.error(msg);
                }
                return {
                    blob: placeholder,
                    contentType: '',
                };
            };
            deferred = window
                .fetch(url, options.fetchRequestInit)
                .then(function (res) {
                // eslint-disable-next-line promise/no-nesting
                return res.blob().then(function (blob) { return ({
                    blob: blob,
                    contentType: res.headers.get('Content-Type') || '',
                }); });
            })
                .then(function (_a) {
                var blob = _a.blob, contentType = _a.contentType;
                return new Promise(function (resolve, reject) {
                    var reader = new FileReader();
                    reader.onloadend = function () {
                        return resolve({
                            contentType: contentType,
                            blob: reader.result,
                        });
                    };
                    reader.onerror = reject;
                    reader.readAsDataURL(blob);
                });
            })
                .then(function (_a) {
                var blob = _a.blob, contentType = _a.contentType;
                return ({
                    contentType: contentType,
                    blob: (0, util_1.parseDataUrlContent)(blob),
                });
            })
                // on failed
                .catch(failed);
            // cache result
            cache[cacheKey] = deferred;
            return [2 /*return*/, deferred];
        });
    });
}
exports.getBlobFromURL = getBlobFromURL;
//# sourceMappingURL=getBlobFromURL.js.map